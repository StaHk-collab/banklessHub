{"ast":null,"code":"import axios from \"axios\";\n\n// Base URL of the backend API (this should be configured in .env)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n// Function to handle user login\nexport const login = async (userId, credentials) => {\n  try {\n    localStorage.setItem(\"userName\", userId);\n    // Make POST request to the backend to authenticate user\n    // const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n    //   user_id: userId,\n    //   credentials,\n    // });\n\n    // Mock response\n    const response = {\n      data: {\n        authToken: \"mocked_token\",\n        message: \"Authentication successful\"\n      },\n      authToken: \"mocked_token\"\n    };\n\n    // If authentication is successful, store the token (if returned)\n    if (response.data.authToken) {\n      localStorage.setItem(\"authToken\", response.data.authToken);\n      return {\n        authToken: response.data.authToken,\n        message: \"Authentication successful\"\n      };\n    } else {\n      return {\n        error: \"Authentication failed\",\n        message: response.data.error || \"Unknown error\"\n      };\n    }\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return {\n      error: \"Login failed\",\n      message: error.message\n    };\n  }\n};\n\n// Function to check if the user is authenticated\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem(\"authToken\");\n  return token ? true : false;\n};\n\n// Function to log the user out\nexport const logout = () => {\n  localStorage.removeItem(\"authToken\");\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","login","userId","credentials","localStorage","setItem","response","data","authToken","message","error","console","isAuthenticated","token","getItem","logout","removeItem"],"sources":["C:/Users/WELCOME/Downloads/banklessHub/frontend/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base URL of the backend API (this should be configured in .env)\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\n// Function to handle user login\r\nexport const login = async (userId, credentials) => {\r\n  try {\r\n    localStorage.setItem(\"userName\", userId);\r\n    // Make POST request to the backend to authenticate user\r\n    // const response = await axios.post(`${API_BASE_URL}/auth/login`, {\r\n    //   user_id: userId,\r\n    //   credentials,\r\n    // });\r\n\r\n    // Mock response\r\n    const response = {\r\n      data: {\r\n        authToken: \"mocked_token\",\r\n        message: \"Authentication successful\",\r\n      },\r\n      authToken: \"mocked_token\",\r\n    };\r\n\r\n    // If authentication is successful, store the token (if returned)\r\n    if (response.data.authToken) {\r\n      localStorage.setItem(\"authToken\", response.data.authToken);\r\n      return { authToken: response.data.authToken, message: \"Authentication successful\" };\r\n    } else {\r\n      return { error: \"Authentication failed\", message: response.data.error || \"Unknown error\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    return { error: \"Login failed\", message: error.message };\r\n  }\r\n};\r\n\r\n// Function to check if the user is authenticated\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem(\"authToken\");\r\n  return token ? true : false;\r\n};\r\n\r\n// Function to log the user out\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"authToken\");\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;;AAEvD;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EAClD,IAAI;IACFC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,MAAM,CAAC;IACxC;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMI,QAAQ,GAAG;MACfC,IAAI,EAAE;QACJC,SAAS,EAAE,cAAc;QACzBC,OAAO,EAAE;MACX,CAAC;MACDD,SAAS,EAAE;IACb,CAAC;;IAED;IACA,IAAIF,QAAQ,CAACC,IAAI,CAACC,SAAS,EAAE;MAC3BJ,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAC1D,OAAO;QAAEA,SAAS,EAAEF,QAAQ,CAACC,IAAI,CAACC,SAAS;QAAEC,OAAO,EAAE;MAA4B,CAAC;IACrF,CAAC,MAAM;MACL,OAAO;QAAEC,KAAK,EAAE,uBAAuB;QAAED,OAAO,EAAEH,QAAQ,CAACC,IAAI,CAACG,KAAK,IAAI;MAAgB,CAAC;IAC5F;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO;MAAEA,KAAK,EAAE,cAAc;MAAED,OAAO,EAAEC,KAAK,CAACD;IAAQ,CAAC;EAC1D;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGT,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC;EAC/C,OAAOD,KAAK,GAAG,IAAI,GAAG,KAAK;AAC7B,CAAC;;AAED;AACA,OAAO,MAAME,MAAM,GAAGA,CAAA,KAAM;EAC1BX,YAAY,CAACY,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}